// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  email     String    @unique
  password  String
  role      Role      @default(AUTHOR)
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     Post[]
}

model Post {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  excerpt     String
  content     String
  mainImage   String
  images      String[]
  tags        String[]
  published   Boolean   @default(false)
  authorName  String?
  authorEmail String?
  views       Int       @default(0)
  likes       Int       @default(0)
  metaTitle   String
  metaDesc    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String?
  categoryId  String?
  author      User?     @relation(fields: [authorId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  postTags    PostTag[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String   @default("#3B82F6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  postTags  PostTag[]
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}

model Contact {
  id        String         @id @default(cuid())
  name      String
  email     String
  phone     String
  message   String
  service   ContactService
  status    ContactStatus  @default(NEW)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model PortfolioProject2 {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  image           String
  images          String[]
  description     String
  descriptionRich String?
  url             String
  date            DateTime
  technologies    String[]
  published       Boolean  @default(false)
  metaTitle       String?
  metaDesc        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Page {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String
  excerpt     String?
  template    PageTemplate @default(GENERAL)
  published   Boolean    @default(false)
  order       Int        @default(0)
  metaTitle   String?
  metaDesc    String?
  metaKeywords String?
  featuredImage String?
  // שדות מותאמים לתבניות
  heroTitle   String?
  heroSubtitle String?
  heroImage   String?
  heroButtonText String?
  heroButtonLink String?
  // שדות לשירותים
  serviceFeatures Json? // [{title: string, description: string, icon: string}]
  serviceBenefits Json? // [{title: string, description: string}]
  servicePricing Json? // [{plan: string, price: string, features: string[], popular: boolean}]
  // שדות לאודות
  aboutImage  String?
  aboutStats  Json? // [{label: string, value: string, icon: string}]
  teamMembers Json? // [{name: string, role: string, image: string, bio: string}]
  // שדות לצור קשר
  contactInfo Json? // {phone: string, email: string, address: string, hours: string}
  contactForm Json? // {fields: string[], successMessage: string}
  // שדות לדף נחיתה
  landingSections Json? // [{type: string, title: string, content: string, image: string}]
  testimonials Json? // [{name: string, role: string, content: string, image: string}]
  // שדות לבלוג
  blogAuthor  String?
  blogCategory String?
  blogTags    String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Template relationship - חדש
  templateId String?
  templateRelation   Template? @relation(fields: [templateId], references: [id])
}

// טבלאות חדשות לתמיכה בתבניות
model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Sections relationship
  sections Section[]

  // Pages relationship
  pages Page[]

  @@map("templates")
}

model Section {
  id        String   @id @default(cuid())
  type      String   // hero, content, features, benefits, process, portfolio, testimonials, faq, pricing, cta
  title     String
  content   Json     // Store section content as JSON
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Template relationship
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("sections")
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum ContactService {
  WEB_DEVELOPMENT
  SEO
  PPC
  OTHER
}

enum PageTemplate {
  GENERAL
  SERVICE
  ABOUT
  CONTACT
  LANDING
  BLOG
} 